/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Login200,
  LoginRequest,
  ValidateTokenParams
} from '.././model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Authenticate user and return JWT token
 * @summary User login
 */
export const login = (
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Login200>> => {
    
    
    return axios.post(
      `/api/auth/login`,
      loginRequest,options
    );
  }



export const getLoginMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  login(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginRequest
    export type LoginMutationError = AxiosError<unknown>

    /**
 * @summary User login
 */
export const useLogin = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Check if JWT token is valid
 * @summary Validate token
 */
export const validateToken = (
    params: ValidateTokenParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<boolean>> => {
    
    
    return axios.get(
      `/api/auth/validate`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getValidateTokenQueryKey = (params?: ValidateTokenParams,) => {
    return [`/api/auth/validate`, ...(params ? [params]: [])] as const;
    }

    
export const getValidateTokenQueryOptions = <TData = Awaited<ReturnType<typeof validateToken>>, TError = AxiosError<unknown>>(params: ValidateTokenParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validateToken>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidateTokenQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof validateToken>>> = ({ signal }) => validateToken(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof validateToken>>, TError, TData> & { queryKey: QueryKey }
}

export type ValidateTokenQueryResult = NonNullable<Awaited<ReturnType<typeof validateToken>>>
export type ValidateTokenQueryError = AxiosError<unknown>


/**
 * @summary Validate token
 */

export function useValidateToken<TData = Awaited<ReturnType<typeof validateToken>>, TError = AxiosError<unknown>>(
 params: ValidateTokenParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validateToken>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getValidateTokenQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



