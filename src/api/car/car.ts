/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CarRequest,
  CarResponse,
  GetCarsParams
} from '.././model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const getCar = (
    carId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CarResponse>> => {
    
    
    return axios.get(
      `/api/cars/${carId}`,options
    );
  }


export const getGetCarQueryKey = (carId?: number,) => {
    return [`/api/cars/${carId}`] as const;
    }

    
export const getGetCarQueryOptions = <TData = Awaited<ReturnType<typeof getCar>>, TError = AxiosError<unknown>>(carId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCar>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCarQueryKey(carId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCar>>> = ({ signal }) => getCar(carId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(carId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCar>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCarQueryResult = NonNullable<Awaited<ReturnType<typeof getCar>>>
export type GetCarQueryError = AxiosError<unknown>



export function useGetCar<TData = Awaited<ReturnType<typeof getCar>>, TError = AxiosError<unknown>>(
 carId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCar>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCarQueryOptions(carId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCar = (
    carId: number,
    carRequest: CarRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.put(
      `/api/cars/${carId}`,
      carRequest,options
    );
  }



export const getUpdateCarMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCar>>, TError,{carId: number;data: CarRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateCar>>, TError,{carId: number;data: CarRequest}, TContext> => {

const mutationKey = ['updateCar'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCar>>, {carId: number;data: CarRequest}> = (props) => {
          const {carId,data} = props ?? {};

          return  updateCar(carId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCarMutationResult = NonNullable<Awaited<ReturnType<typeof updateCar>>>
    export type UpdateCarMutationBody = CarRequest
    export type UpdateCarMutationError = AxiosError<unknown>

    export const useUpdateCar = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCar>>, TError,{carId: number;data: CarRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateCar>>,
        TError,
        {carId: number;data: CarRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCarMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const deleteCar = (
    carId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.delete(
      `/api/cars/${carId}`,options
    );
  }



export const getDeleteCarMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCar>>, TError,{carId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCar>>, TError,{carId: number}, TContext> => {

const mutationKey = ['deleteCar'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCar>>, {carId: number}> = (props) => {
          const {carId} = props ?? {};

          return  deleteCar(carId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCarMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCar>>>
    
    export type DeleteCarMutationError = AxiosError<unknown>

    export const useDeleteCar = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCar>>, TError,{carId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteCar>>,
        TError,
        {carId: number},
        TContext
      > => {

      const mutationOptions = getDeleteCarMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getCars = (
    params?: GetCarsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CarResponse[]>> => {
    
    
    return axios.get(
      `/api/cars`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCarsQueryKey = (params?: GetCarsParams,) => {
    return [`/api/cars`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCarsQueryOptions = <TData = Awaited<ReturnType<typeof getCars>>, TError = AxiosError<unknown>>(params?: GetCarsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCars>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCarsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCars>>> = ({ signal }) => getCars(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCars>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCarsQueryResult = NonNullable<Awaited<ReturnType<typeof getCars>>>
export type GetCarsQueryError = AxiosError<unknown>



export function useGetCars<TData = Awaited<ReturnType<typeof getCars>>, TError = AxiosError<unknown>>(
 params?: GetCarsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCars>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCarsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCar = (
    carRequest: CarRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.post(
      `/api/cars`,
      carRequest,options
    );
  }



export const getCreateCarMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCar>>, TError,{data: CarRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createCar>>, TError,{data: CarRequest}, TContext> => {

const mutationKey = ['createCar'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCar>>, {data: CarRequest}> = (props) => {
          const {data} = props ?? {};

          return  createCar(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCarMutationResult = NonNullable<Awaited<ReturnType<typeof createCar>>>
    export type CreateCarMutationBody = CarRequest
    export type CreateCarMutationError = AxiosError<unknown>

    export const useCreateCar = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCar>>, TError,{data: CarRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createCar>>,
        TError,
        {data: CarRequest},
        TContext
      > => {

      const mutationOptions = getCreateCarMutationOptions(options);

      return useMutation(mutationOptions );
    }
    