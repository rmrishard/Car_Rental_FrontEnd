/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from '../axiosConfig.js';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const getRental = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.get(
      `/api/rental`,{
        responseType: 'text',
    ...options,}
    );
  }


export const getGetRentalQueryKey = () => {
    return [`/api/rental`] as const;
    }

    
export const getGetRentalQueryOptions = <TData = Awaited<ReturnType<typeof getRental>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRental>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRentalQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRental>>> = ({ signal }) => getRental({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRental>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRentalQueryResult = NonNullable<Awaited<ReturnType<typeof getRental>>>
export type GetRentalQueryError = AxiosError<unknown>



export function useGetRental<TData = Awaited<ReturnType<typeof getRental>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRental>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRentalQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



