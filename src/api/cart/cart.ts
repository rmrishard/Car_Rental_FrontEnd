/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CartCreateRequest,
  CartResponse,
  CartUpdateRequest
} from '.././model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const updateCartItem = (
    carId: number,
    cartUpdateRequest: CartUpdateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartResponse>> => {
    
    
    return axios.put(
      `/api/carts/items/${carId}`,
      cartUpdateRequest,options
    );
  }



export const getUpdateCartItemMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{carId: number;data: CartUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{carId: number;data: CartUpdateRequest}, TContext> => {

const mutationKey = ['updateCartItem'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCartItem>>, {carId: number;data: CartUpdateRequest}> = (props) => {
          const {carId,data} = props ?? {};

          return  updateCartItem(carId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateCartItem>>>
    export type UpdateCartItemMutationBody = CartUpdateRequest
    export type UpdateCartItemMutationError = AxiosError<unknown>

    export const useUpdateCartItem = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{carId: number;data: CartUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateCartItem>>,
        TError,
        {carId: number;data: CartUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCartItemMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const removeFromCart = (
    carId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartResponse>> => {
    
    
    return axios.delete(
      `/api/carts/items/${carId}`,options
    );
  }



export const getRemoveFromCartMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromCart>>, TError,{carId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeFromCart>>, TError,{carId: number}, TContext> => {

const mutationKey = ['removeFromCart'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeFromCart>>, {carId: number}> = (props) => {
          const {carId} = props ?? {};

          return  removeFromCart(carId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveFromCartMutationResult = NonNullable<Awaited<ReturnType<typeof removeFromCart>>>
    
    export type RemoveFromCartMutationError = AxiosError<unknown>

    export const useRemoveFromCart = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromCart>>, TError,{carId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof removeFromCart>>,
        TError,
        {carId: number},
        TContext
      > => {

      const mutationOptions = getRemoveFromCartMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const addToCart = (
    cartCreateRequest: CartCreateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartResponse>> => {
    
    
    return axios.post(
      `/api/carts/items`,
      cartCreateRequest,options
    );
  }



export const getAddToCartMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToCart>>, TError,{data: CartCreateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addToCart>>, TError,{data: CartCreateRequest}, TContext> => {

const mutationKey = ['addToCart'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToCart>>, {data: CartCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  addToCart(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToCartMutationResult = NonNullable<Awaited<ReturnType<typeof addToCart>>>
    export type AddToCartMutationBody = CartCreateRequest
    export type AddToCartMutationError = AxiosError<unknown>

    export const useAddToCart = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToCart>>, TError,{data: CartCreateRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addToCart>>,
        TError,
        {data: CartCreateRequest},
        TContext
      > => {

      const mutationOptions = getAddToCartMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const getCart = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartResponse>> => {
    
    
    return axios.get(
      `/api/carts`,options
    );
  }


export const getGetCartQueryKey = () => {
    return [`/api/carts`] as const;
    }

    
export const getGetCartQueryOptions = <TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCart>>> = ({ signal }) => getCart({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCartQueryResult = NonNullable<Awaited<ReturnType<typeof getCart>>>
export type GetCartQueryError = AxiosError<unknown>



export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCartQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const clearCart = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartResponse>> => {
    
    
    return axios.delete(
      `/api/carts/clear`,options
    );
  }



export const getClearCartMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCart>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof clearCart>>, TError,void, TContext> => {

const mutationKey = ['clearCart'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearCart>>, void> = () => {
          

          return  clearCart(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearCartMutationResult = NonNullable<Awaited<ReturnType<typeof clearCart>>>
    
    export type ClearCartMutationError = AxiosError<unknown>

    export const useClearCart = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCart>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof clearCart>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getClearCartMutationOptions(options);

      return useMutation(mutationOptions );
    }
    