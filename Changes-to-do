# Car Rental System - Complete Implementation Plan

## PHASE 1: FIX FOUNDATION ISSUES

### Step 1: Fix API Inconsistencies ⚠️ CRITICAL
- [x] ✅ Add missing `deleteCar` function to `src/api/car/car.ts`
- [x] ✅ Fix user API endpoint: change `PUT /{userId}` to `PUT /api/users/{userId}` in user.ts
- [x] ✅ Standardize user creation: change `POST /api/addUsers` to `POST /api/users`
- [x] ✅ APIs regenerated with Orval - all endpoints now consistent
- [x] ✅ NEW: Authentication APIs added (login, validateToken)

### Step 2: Implement Proper Routing ⚠️ CRITICAL
- [x] ✅ Install React Router: `npm install react-router-dom`
- [x] ✅ Replace App.jsx with proper router setup
- [x] ✅ Create route structure for all pages
- [x] ✅ Fix navigation from `window.location.href` to `useNavigate()` hook
- [x] ✅ Add navigation component/header

## PHASE 2: CORE RENTAL FUNCTIONALITY

### Step 3: User Authentication System 🔐 HIGH PRIORITY
- [x] ✅ Create Login page component
- [x] ✅ Create Register page component  
- [x] ✅ Connect to authentication APIs (login, register)
- [x] ✅ Add login/register routes and navigation
- [x] ✅ Implement AuthContext for user state management
- [x] ✅ Create user session management with localStorage
- [x] ✅ Add logout functionality with dynamic navigation
- [x] ✅ Show user name and logout button when logged in
- [x] ✅ Add protected cart functionality - redirects to login when not authenticated
- [x] ✅ Enhanced login page with redirect back to original page
- [x] ✅ Add role-based access control for admin features
- [x] ✅ Hide admin navigation for non-admin users
- [x] ✅ Protect admin routes with ProtectedRoute component
- [x] ✅ Hide edit buttons for non-admin users
- [x] ✅ Remove role selection from registration (auto-assign USER role)

### Step 4: Car Details & Booking 🚗 HIGH PRIORITY
- [x] ✅ Create CarDetailsPage component (referenced in CarsManagementPage.jsx:124)
- [ ] Add rental date picker component
- [ ] Implement booking form with date validation
- [ ] Add price calculation based on rental duration
- [ ] Connect booking to cart APIs
- [ ] Add car availability checking

### Step 5: Shopping Cart System 🛒 HIGH PRIORITY
- [x] ✅ Create CartPage component using existing cart APIs
- [x] ✅ Implement cart item display with car details
- [x] ✅ Add quantity/duration management for cart items
- [x] ✅ Implement cart total calculations
- [x] ✅ Add remove from cart functionality
- [ ] Create checkout process
- [ ] Connect to order creation

## PHASE 3: COMPLETE USER EXPERIENCE

### Step 6: User Management 👤 MEDIUM PRIORITY
- [ ] Create UserProfilePage component
- [ ] Add user edit functionality using existing user APIs
- [ ] Implement user dashboard
- [ ] Add rental history view using order APIs
- [ ] Add user preferences settings

### Step 7: Order Management 📋 MEDIUM PRIORITY
- [ ] Create OrdersPage using existing order APIs (`useGetOrders`)
- [ ] Create OrderDetailsPage using `useGetOrder`
- [ ] Implement order status tracking
- [ ] Add order history filtering and search
- [ ] Add order cancellation functionality

### Step 8: Enhanced Car Management ⚙️ MEDIUM PRIORITY
- [x] ✅ Create EditCarPage component (referenced in CarsManagementPage.jsx:131)
- [ ] Add car image upload functionality
- [ ] Implement car availability calendar
- [ ] Add car search and filtering on CarListPage
- [ ] Add car categories/types filtering
- [ ] Implement car status management


## CURRENT ISSUES TO FIX IMMEDIATELY:

### 🔴 Critical Bugs:
1. [x] ✅ **Missing deleteCar function** - FIXED - CarsManagementPage.jsx:50 calls non-existent function
2. [x] ✅ **No routing system** - FIXED - App.jsx doesn't implement proper navigation
3. **Inconsistent API endpoints** - User APIs have different patterns

### 📁 Missing Pages Referenced in Code:
- [x] ✅ `/car-details/${car.id}` - CREATED - Referenced in CarsManagementPage.jsx:124
- [x] ✅ `/edit-car/${car.id}` - CREATED - Referenced in CarsManagementPage.jsx:131
- [x] ✅ `/add-car` - EXISTS - Referenced in CarsManagementPage.jsx:85
- [x] ✅ `/cars-management` - EXISTS - Referenced in AddCarPage.jsx:99

### 🔧 Existing Working Components:
- ✅ CarListPage.jsx - Uses `useGetCars()` API correctly
- ✅ AddCarPage.jsx - Uses `createCar()` API correctly
- ✅ CarsManagementPage.jsx - Now fully working with deleteCar implemented
- ✅ CarDetailsPage.jsx - Full car details display with edit navigation
- ✅ EditCarPage.jsx - Complete car editing functionality
- ✅ CartPage.jsx - Full shopping cart functionality implemented

### 📊 Available APIs Being Used:
- ✅ Cart management APIs (getCart, addToCart, removeFromCart, clearCart) - NOW IN USE
- ✅ NEW: Authentication APIs (login, validateToken) - READY FOR USE
- Order APIs (getOrders, getOrder) - Still available for future use
- User management APIs (getAllUsers, getUser, addUser, updateUser, deleteUser) - Enhanced with role system (USER/ADMIN)

## IMPLEMENTATION PRIORITY:

### Week 1: Critical Fixes ✅ COMPLETED
- [x] ✅ Fix deleteCar API issue
- [x] ✅ Implement React Router
- [x] ✅ Fix existing page navigation
- [x] ✅ Create missing page components (CarDetails, EditCar)
- [x] ✅ Implement full shopping cart functionality

### Week 2: Core Functionality - ✅ MOSTLY COMPLETED
- [x] ✅ User authentication system (login/register/logout/protected cart)
- [ ] Car booking form with date validation
- [ ] Add booking to cart functionality from CarDetailsPage

### Week 3: Enhanced Features
- [ ] Checkout process
- [ ] Order management system
- [ ] User profile management

### Week 4+: Advanced Features
- [ ] Payment integration
- [ ] Admin dashboard
- [ ] Enhanced UX features

## NOTES:
- All API functions are generated by Orval from OpenAPI spec
- APIs use React Query for state management
- Material-UI is already set up for components
- Mock data fallback is implemented in CarListPage for offline development